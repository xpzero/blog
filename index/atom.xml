<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xpzero.github.io/blog/index</id>
    <title>What are you thinking about? Blog</title>
    <updated>2023-09-09T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xpzero.github.io/blog/index"/>
    <subtitle>What are you thinking about? Blog</subtitle>
    <icon>https://xpzero.github.io/blog/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[配置dotfiles记录]]></title>
        <id>https://xpzero.github.io/blog/index/2023/09/09/index</id>
        <link href="https://xpzero.github.io/blog/index/2023/09/09/index"/>
        <updated>2023-09-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[因为工作和个人电脑都是Mac，平时也会在家用自己的电脑coding，所以想统一一下编码环境，方便使用。]]></summary>
        <content type="html"><![CDATA[<p>因为工作和个人电脑都是Mac，平时也会在家用自己的电脑coding，所以想统一一下编码环境，方便使用。</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_l04S"><div class="admonitionHeading_giW_"><span class="admonitionIcon_JA_F"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_YxFr"><p><code>dotfiles</code>指的是，系统中比较重要的隐藏文件(夹)。比如<code>.config/</code>、<code>.zshrc</code>等。</p></div></div><h2 class="anchor anchorWithStickyNavbar_J8e2" id="思路整理">思路整理<a href="#思路整理" class="hash-link" aria-label="思路整理的直接链接" title="思路整理的直接链接">​</a></h2><ol><li>创建github仓库</li><li>将整理好的<code>dotfiles</code>上传到repo</li><li>创建<code>dotfiles</code>安装脚本</li><li>备份<code>~/</code>下可能会涉及到的文件(夹)</li><li>执行<code>dotfiles</code>安装脚本，为文件(夹)创建软链接(symlink)到<code>~/</code>下</li><li>重启终端，等待魔法</li></ol><p>下面着重记录<code>dotfiles</code>的整理及安装脚本的创建</p><h2 class="anchor anchorWithStickyNavbar_J8e2" id="dotfiles整理"><code>dotfiles/</code>整理<a href="#dotfiles整理" class="hash-link" aria-label="dotfiles整理的直接链接" title="dotfiles整理的直接链接">​</a></h2><p>这里整理了<code>~/</code>下的如下内容</p><ul><li><code>.config/</code><ul><li><code>alacritty/</code></li><li><code>nvim/</code></li><li><code>tmux/</code></li></ul></li><li><code>.oh-my-zsh/</code></li><li><code>.p10k.zsh</code></li><li><code>.zshrc</code></li></ul><p>可以使用<code>cp</code>命令从<code>~/</code>下直接拷贝到<code>dotfiles/</code>中。这里拷贝后所有一级文件(夹)均去掉了<code>.</code>，安装脚本会有处理。</p><div class="language-sh codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-sh codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain">cp .zshrc {你的路径}/dotfiles/dot/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cp -r .config/ {你的路径}/dotfiles/dot/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cp -r .oh-my-zsh/ {你的路径}/dotfiles/dot/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cp .p10k.zsh {你的路径}/dotfiles/dot/</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>dotfiles/</code>的目录树如下</p><div class="language-txt codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-txt codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── bootstrap.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── dot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ├── config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ├── oh-my-zsh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ├── p10k.zsh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    └── zshrc</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里分出<code>dot/</code>是为了方便安装脚本中的目录查找，也便于文件管理。</p><h2 class="anchor anchorWithStickyNavbar_J8e2" id="dotfiles安装脚本"><code>dotfiles/</code>安装脚本<a href="#dotfiles安装脚本" class="hash-link" aria-label="dotfiles安装脚本的直接链接" title="dotfiles安装脚本的直接链接">​</a></h2><p>这里写的比较简单，在<code>dotfiles/</code>目录下启动<code>bootstrap.sh</code>脚本，就会为<code>dotfiles/dot/</code>下的所有一级文件(夹)添加带有<code>.</code>前缀的<code>symlink</code>到<code>~/</code>下</p><p>脚本内容如下</p><div class="language-sh codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-sh codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># The difference in sh &amp; bash is whether to continue execute script or not when program had errors.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">shPath="$(pwd)/$(basename $0)"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ -e $shPath &amp;&amp; -x $shPath ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    chmod +x "$shPath"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # if want to catch exception and output yours info, using echo command in else.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "$shPath is not exists or no permission."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    exit 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># read filename in dot/.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dotPath="$(pwd)/dot"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dotFiles=$(ls $dotPath)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "------------------------------------Install dotfiles-----------------------------------"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for filename in $dotFiles; do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sourceFile="$dotPath/$filename"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    targetFile="$HOME/.$filename"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ln -sf $sourceFile $targetFile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "$HOME/.$filename symlink is installed."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "---------------------------------dotfiles is installed!--------------------------------"</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在终端里<code>cd</code>到<code>dotfiles/</code>下，执行<code>./bootstrap.sh</code>即可进行<code>symlink</code>的安装。</p><p>记得安装之后要重启终端。</p><h2 class="anchor anchorWithStickyNavbar_J8e2" id="参考">参考<a href="#参考" class="hash-link" aria-label="参考的直接链接" title="参考的直接链接">​</a></h2><p><a href="https://blog.csdn.net/Quincuntial/article/details/54348471" target="_blank" rel="noopener noreferrer">Linux Shell获取文件夹下的文件名</a> </p><p><a href="https://www.cnblogs.com/conefirst/articles/15232323.html" target="_blank" rel="noopener noreferrer">Shell bash和sh区别</a> </p><p><a href="https://www.myfreax.com/how-to-create-symbolic-links-in-linux-using-the-ln-command/" target="_blank" rel="noopener noreferrer">Linux ln 命令创建符号链接</a> </p><p><a href="https://www.bilibili.com/video/BV14X4y1P7bh/?share_source=copy_web&amp;vd_source=60cb976cb0acb8dc9492ec18c792ff15" target="_blank" rel="noopener noreferrer">【Linux】021-软硬链接</a> </p><p><a href="https://github.com/alrra/dotfiles/blob/main/src/os/create_symbolic_links.sh" target="_blank" rel="noopener noreferrer">alrra/dotfiles</a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Hugo构建个人博客并托管至Github Pages]]></title>
        <id>https://xpzero.github.io/blog/index/2023/09/04/使用Hugo构建个人博客并托管至Github Pages</id>
        <link href="https://xpzero.github.io/blog/index/2023/09/04/使用Hugo构建个人博客并托管至Github Pages"/>
        <updated>2023-09-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[网上冲浪看到别人的博客好简洁好好看，我也要整一套🤓。But！来来回回在网上查询，又有时候忘记要干啥整了一天才搞定🙈。这里记录下我「贪」的辛苦🥹]]></summary>
        <content type="html"><![CDATA[<p>网上冲浪看到别人的博客好简洁好好看，我也要整一套🤓。But！来来回回在网上查询，又有时候忘记要干啥整了一天才搞定🙈。这里记录下我「贪」的辛苦🥹</p><h2 class="anchor anchorWithStickyNavbar_J8e2" id="明确目标">明确目标<a href="#明确目标" class="hash-link" aria-label="明确目标的直接链接" title="明确目标的直接链接">​</a></h2><p>首先，我们要明确一下自己要干什么？铭记初心，方得始终，深有体会😕</p><ol><li>搭建博客，拥抱批评</li><li>将博客内容托管至Github Pages，进行网站白嫖。</li></ol><p>那么如何搭建博客呢？我这次使用的是Hugo。其实中间有倒腾过Hexo、Netlify全都夭折。
其实使用静态网站构建框架生成本地博客挺快捷、简单的，时间主要浪费在了代码托管那一块儿。</p><h2 class="anchor anchorWithStickyNavbar_J8e2" id="hugo">Hugo<a href="#hugo" class="hash-link" aria-label="Hugo的直接链接" title="Hugo的直接链接">​</a></h2><p>一开始是使用的Hexo进行博客的生成，但是在搜索代码托管的过程中发现有人说，Hugo更加方便、易用。</p><p><img loading="lazy" alt="Why Hugo" src="/blog/assets/images/useHugo_why-hugo-dd7150b80ef0eee4d1359393ee96eade.png" width="1392" height="122" class="img_ABpA"></p><p>哇！看到这里岂能坐视不管？咱也用！当时已经是4 AM了🥺，这种状态有时候真是让人又爱又恨☹️</p><p>说干就干。进入<a href="https://gohugo.io/" target="_blank" rel="noopener noreferrer">Hugo</a>官网，就看见上面写着「The world's fastest framework for buiding websites」🧐 </p><p><img loading="lazy" alt="The world&amp;#39;s fastest framework for buiding websites」" src="/blog/assets/images/useHugo_fastest-16f7ae2c8e4700cb07cf5e227a8383c0.png" width="1612" height="1026" class="img_ABpA"> </p><h3 class="anchor anchorWithStickyNavbar_J8e2" id="安装hugo">安装Hugo<a href="#安装hugo" class="hash-link" aria-label="安装Hugo的直接链接" title="安装Hugo的直接链接">​</a></h3><p>这里跟着官网来就好了。我是今年刚买的Mac，所以这里就记录下Mac下的安装过程。</p><p>一定要有<code>git</code>环境，因为<code>Hugo</code>的主题要从<code>github</code>上获取，没有<code>git</code>拿不到。</p><div class="language-sh codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-sh codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain"># 这里brew是安装了Homebrew，用来管理各种包的安装，可以理解为软件管理</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">brew install hugo</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-sh codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-sh codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain"># 创建一个website，因为我是要搭建博客，所以这里起名叫blog</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 这个命令会创建blog目录其中会有一些空的结构目录以备后用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hugo new site blog</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-sh codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-sh codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain">cd blog</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 开始获取博客主题</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git submodule add https://github.com/nanxiaobei/hugo-paper</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 将主题配置写入hugo.toml配置文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "theme = 'paper'" &gt;&gt; hugo.toml</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-sh codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-sh codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain"># 启动本地服务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hugo server</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-sh codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-sh codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain"># 该命令可以生成静态资源，主要为资源托管做准备</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 它会生成一个public/，里面的文件就是博客的静态资源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hugo</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_J8e2" id="配置hugo">配置Hugo<a href="#配置hugo" class="hash-link" aria-label="配置Hugo的直接链接" title="配置Hugo的直接链接">​</a></h3><p>这里最重要的就是<code>baseURL</code>，如果配置的不对，那么资源部署到GitHub之后就会导致<code>css</code>等资源路径找不到而造成页面样式丢失。</p><div class="language-toml codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-toml codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain"># 可以理解为是部署到Github之后，博客网站的基础路径</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 一定要带上GitHub上的仓库名哦！这个地址可以在配置公开仓库的Github Pages的设置那里拿到。有一个`Visit site`按钮，点击即可进入博客</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">baseURL = 'https://xpzero.github.io/blog'</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>到此，一个博客网站就算是已经基本完成了，博客中分享的文章就需要我自己后续再补充调整了。现在可以开始这篇文章的重要部分了！</p><h2 class="anchor anchorWithStickyNavbar_J8e2" id="托管博客资源到github">托管博客资源到GitHub<a href="#托管博客资源到github" class="hash-link" aria-label="托管博客资源到GitHub的直接链接" title="托管博客资源到GitHub的直接链接">​</a></h2><p><strong>有一个情况要先说明一下，GitHub的GitHub Pages使用的前提是仓库是公开的，不能是私有的。</strong></p><p><img loading="lazy" alt="Github Pages configure" src="/blog/assets/images/useHugo_enable-pages-96ede7eb77e0a8951fdcd71754e7a356.png" width="2830" height="1042" class="img_ABpA"> </p><p>这里要先思考一下，我们托管博客资源是把包括主题等在内的所有文件都放在公开仓库吗？有点「裸奔」的感觉🤨。但是不把所有的博客资源做一个版本控制，似乎也不习惯，该怎么办呢？</p><p>经过不懈的努力，一直搜啊搜，了解到了可以通过创建两个仓库，并建立两个仓库之间的连接来托管博客资源到GitHub。两个仓库的作用如下：</p><ul><li><p>私有仓库，存放所有包括主题等资源在内的源文件</p></li><li><p>公开仓库，仅存放通过<code>hugo</code>命令生成的<code>public/</code>下的文件</p></li><li><p>二者建立联系，当私有仓库有变动时，公开仓库也跟着变动</p><ul><li>通过<code>shell</code>脚本，当私有仓库的内容被更新后，执行脚本将私有仓库中的<code>public/</code>内的所有文件上传至公开仓库的指定分支，完成部署</li><li>通过在私有仓库创建<code>Github Actions</code>的<code>workflows</code>的方式自动完成上面的动作👏。</li></ul></li></ul><p>本着能自动就不手动的原则，当然要采用<code>Github Actions</code>的方式让它自动完成，别来烦我咯😎。</p><h3 class="anchor anchorWithStickyNavbar_J8e2" id="授权问题">授权问题<a href="#授权问题" class="hash-link" aria-label="授权问题的直接链接" title="授权问题的直接链接">​</a></h3><p>就是因为这个问题，时间如流水般一去不返。😑</p><p><img loading="lazy" alt="pre-auth" src="/blog/assets/images/useHugo_auth_pre-a50bc838549486464c56a31d7ed80eb8.png" width="1496" height="554" class="img_ABpA"> </p><p>因为公开仓库和私有仓库是两个单独的仓库，所以需要使用<code>Personal access token</code>.其目的是为了让<code>worksflows</code>可以使用<code>git</code>的api</p><h4 class="anchor anchorWithStickyNavbar_J8e2" id="创建personal-access-token">创建<code>Personal access token</code><a href="#创建personal-access-token" class="hash-link" aria-label="创建personal-access-token的直接链接" title="创建personal-access-token的直接链接">​</a></h4><p>这里有两种方式，官方推荐的第一种，我实践的时候使用的第二种😛</p><ul><li><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token" target="_blank" rel="noopener noreferrer">Creating a fine-grained personal access token</a> </li><li><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic" target="_blank" rel="noopener noreferrer">Creating a personal access token (classic)</a></li></ul><p>开始创建</p><p><img loading="lazy" alt="pat-pre" src="/blog/assets/images/useHugo_pat-pre-4681d5ee9ec76243842c3ca81efecccc.png" width="398" height="830" class="img_ABpA"><img loading="lazy" alt="pat-pre" src="/blog/assets/images/useHugo_pat-pre2-63369a9a27417836192065b3d2db3b4b.png" width="244" height="836" class="img_ABpA"> </p><p>这里因为我创建过<code>Personal access token</code>，所以跟没有创建过的不一样。点击<code>Generate new token</code>可以再建。点击之前创建过的<code>token</code>, 可以进去选择重新生成。
<img loading="lazy" alt="pat-pre" src="/blog/assets/images/useHugo_pat-288846777838c9329fa1d90051180ad7.png" width="2188" height="644" class="img_ABpA"> </p><p>在配置页面勾选完权限，设置名字后保存，会生成一串<code>key</code>，稍微存一下，要给私有库创建<code>Secrets</code>用，也可以重新生成。</p><h4 class="anchor anchorWithStickyNavbar_J8e2" id="私有库添加secrets">私有库添加<code>Secrets</code><a href="#私有库添加secrets" class="hash-link" aria-label="私有库添加secrets的直接链接" title="私有库添加secrets的直接链接">​</a></h4><p>其目的是为了加密<code>Personal access token</code>.如果有一天，我们更换了<code>Personal access token</code>，就要同步修改<code>workflows</code>。使用被加密的<code>token</code>，不仅可以在<code>workflows</code>中动态读取<code>token</code>还可以让信息更加安全。</p><p><img loading="lazy" alt="create secrets" src="/blog/assets/images/useHugo_secrets-0f94e2f5d8a099d8b0fe2bcbae4b81e7.png" width="2838" height="1650" class="img_ABpA"><img loading="lazy" alt="secrets2" src="/blog/assets/images/useHugo_secrets2-a7428d44ac7a81af9f326aa4abdfa697.png" width="1266" height="1030" class="img_ABpA"></p><p>如果权限没配好在<code>workflows</code>运行的时候就会出现<code>fatal: could not read Username for 'https://github.com': No such device or address</code>的报错</p><h3 class="anchor anchorWithStickyNavbar_J8e2" id="创建公开仓库">创建公开仓库<a href="#创建公开仓库" class="hash-link" aria-label="创建公开仓库的直接链接" title="创建公开仓库的直接链接">​</a></h3><p><img loading="lazy" alt="public repo" src="/blog/assets/images/useHugo_public-repo-b65c6126f034636b261137231aa39724.png" width="1550" height="1196" class="img_ABpA"> </p><p>记得配置<code>Github Pages</code>。如果公开仓库有<code>gh-pages</code>分支，该仓库会被默认设置<code>Github Pages</code>，且其触发部署的分支即为<code>gh-pages</code>.该分支被<code>push</code>后会触发资源部署机制自动将资源部署发布。下面的例子是使用的<code>main</code>分支，需要手动设置<code>Github Pages</code>，仍然使用<strong>分支触发</strong>的方式进行资源部署.</p><p><img loading="lazy" alt="public pages" src="/blog/assets/images/useHugo_public-pages-74324f5ee364b2e4b21dbabbcd48f908.png" width="2874" height="1186" class="img_ABpA"> </p><h3 class="anchor anchorWithStickyNavbar_J8e2" id="创建私有仓库">创建私有仓库<a href="#创建私有仓库" class="hash-link" aria-label="创建私有仓库的直接链接" title="创建私有仓库的直接链接">​</a></h3><p><img loading="lazy" alt="创建私有仓库" src="/blog/assets/images/useHugo_create-repo-5411200eba4a8772f01b0fbb93c2f1ff.png" width="1368" height="1670" class="img_ABpA"></p><h3 class="anchor anchorWithStickyNavbar_J8e2" id="创建workflows">创建workflows<a href="#创建workflows" class="hash-link" aria-label="创建workflows的直接链接" title="创建workflows的直接链接">​</a></h3><p>要在<strong>私有仓库</strong>创建<code>workflows</code>.</p><p><img loading="lazy" alt="创建workflows" src="/blog/assets/images/useHugo_create-workflows-0e7d96de897fa6c9ad22bb3b6946ea6d.png" width="1876" height="972" class="img_ABpA"></p><p>这里我们选安装自己的<code>workflows</code>就可以了，为避免出错其配置内容尽量和我下面给出的配置内容一致。</p><div class="language-toml codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-toml codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain"># Sample workflow for building and deploying a Hugo site to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">name: Deploy Hugo site to Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">on:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # push 触发actions。Runs on pushes targeting the default branch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  push:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # main分支上的push触发actions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    branches: ["main"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # Allows you to run this workflow manually from the Actions tab</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # workflow_dispatch:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jobs:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # Build job</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  build:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    runs-on: ubuntu-latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    env:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      HUGO_VERSION: 0.117.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    steps:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - name: Checkout</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        uses: actions/checkout@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - name: push to Github Pages repository</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        working-directory: ./public</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # echo "&lt;domain&gt;" &gt; CNAME 使用自定义域名的话，可以把这个加在git init上面.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 这些地方需要修改：YOUR_NAME（可以随意）、YOUR_EMAIL、YOUR_COMMIT_MESSAGE、YOUR_PERSONAL_ACCESS_TOKEN、</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # YOUR_USERNAME（你的github账户名）、YOUR_PUBLIC_REPO_NAME（公开仓库名）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        run: |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          git init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          git checkout -b main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          git add -A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          git -c user.name="YOUR_NAME" -c user.email="YOUR_EMAIL" commit -m "YOUR_COMMIT_MESSAGE"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          git remote add origin https://${{secrets.YOUR_PERSONAL_ACCESS_TOKEN}}@github.com/YOUR_USERNAME/YOUR_PUBLIC_REPO_NAME.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          git push origin main -f -q</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" alt="edit workflows" src="/blog/assets/images/useHugo_edit-workflows-f21464ec00e4bc0c47e999ae1f0bae6f.png" width="3826" height="1318" class="img_ABpA"> </p><h3 class="anchor anchorWithStickyNavbar_J8e2" id="撒花">撒花🎉<a href="#撒花" class="hash-link" aria-label="撒花🎉的直接链接" title="撒花🎉的直接链接">​</a></h3><p><code>workflows</code>的变更被<code>commit</code>之后，就可以在<code>Actions</code>面板中看到<code>workflows</code>的运行记录了。</p><p><img loading="lazy" alt="workflows log" src="/blog/assets/images/useHugo_workflows-0548e393b5781f2b160f4cec05c777ef.png" width="2146" height="1464" class="img_ABpA"></p><p>另外，公开仓库也因为有之前配置<code>Github Pages</code>时设置的因分支代码改动而触发部署的配置，在<code>Actions</code>面板也能看到对应的部署记录</p><p><img loading="lazy" alt="finish" src="/blog/assets/images/useHugo_finish-d12aa1ec4c9fe2eea099cd7891918745.png" width="1576" height="1406" class="img_ABpA"> </p><h1>感恩</h1><p><a href="https://phoenixnap.com/kb/git-ssh-vs-https" target="_blank" rel="noopener noreferrer">SSH vs. HTTPS for Git: Which One Should You Use?</a></p><p><a href="https://www.cnblogs.com/scofi/p/6617394.html" target="_blank" rel="noopener noreferrer">SSH公钥登录原理</a></p><p><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/about-authentication-to-github" target="_blank" rel="noopener noreferrer">About authentication to GitHub</a></p><p><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens" target="_blank" rel="noopener noreferrer">Managing your personal access tokens
</a>
<a href="https://juejin.cn/post/7120474763910676488" target="_blank" rel="noopener noreferrer">GitHub 私有仓库免费开启 GitHub Pages 的可行性方案</a></p><p><a href="https://juejin.cn/post/7008847699919241229" target="_blank" rel="noopener noreferrer">通过 GitHub Actions 实现私有仓库的免费 Github Pages 部署</a></p><p><a href="https://zhuanlan.zhihu.com/p/37752930" target="_blank" rel="noopener noreferrer">如何使用Hugo在GitHub Pages上搭建免费个人网站</a></p><p><a href="https://www.wenhui.space/docs/04-build-blog-site/hugo_deploy_to_github/" target="_blank" rel="noopener noreferrer">将hugo博客部署到github</a></p><p><a href="https://kuang.netlify.app/blog/hugo.html" target="_blank" rel="noopener noreferrer">HUGO</a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React学习记录-前置知识]]></title>
        <id>https://xpzero.github.io/blog/index/2023/09/04/React学习记录-前置知识</id>
        <link href="https://xpzero.github.io/blog/index/2023/09/04/React学习记录-前置知识"/>
        <updated>2023-08-19T12:01:20.000Z</updated>
        <summary type="html"><![CDATA[React 是使用JavaScript构建快速响应的大型web应用程序的首选方式]]></summary>
        <content type="html"><![CDATA[<blockquote><p>React 是使用<code>JavaScript</code>构建<strong>快速响应</strong>的大型<code>web</code>应用程序的首选方式</p></blockquote><p>影响浏览器快速相应的场景：</p><ol><li>「CPU」瓶颈：大计算量或设备性能不足导致的页面卡帧、卡顿</li><li>「IO瓶颈」：网络请求的时延长导致页面不能快速根据数据进行页面渲染导致页面白屏时间长，卡顿。</li></ol><h1>浏览器基本知识</h1><h2 class="anchor anchorWithStickyNavbar_J8e2" id="浏览器进程">浏览器进程<a href="#浏览器进程" class="hash-link" aria-label="浏览器进程的直接链接" title="浏览器进程的直接链接">​</a></h2><ul><li>主进程</li><li>GPU进程</li><li>插件进程</li><li>渲染进程<ul><li>js引擎线程</li><li>事件触发线程</li><li>定时器触发线程</li><li>异步http请求线程</li><li>GUI渲染线程</li></ul></li><li>网络进程</li></ul><p>更多可以看下这里：<a href="https://juejin.cn/post/7018532992410714142" target="_blank" rel="noopener noreferrer">肝了一晚的浏览器渲染进程</a> </p><h2 class="anchor anchorWithStickyNavbar_J8e2" id="渲染帧">渲染帧<a href="#渲染帧" class="hash-link" aria-label="渲染帧的直接链接" title="渲染帧的直接链接">​</a></h2><blockquote><p><strong>渲染帧是指浏览器一次完成的绘制过程</strong>，帧之间的时间间隔是<code>DOM</code>试图更新的最小间隔。由于主流的屏幕刷新率都在60Hz（1000ms/60Hz ~= 16.6ms），那么渲染一帧的时间必须在16.6ms内才能不掉帧。也就是说，每次渲染都要在16.6ms内完成页面才够流畅不会有卡顿感。这段时间内浏览器需要完成如下事情</p><ol><li>脚本执行（JavaScript）：脚本造成了需要重绘页面的改动，比如增删DOM、请求动画等</li><li>样式计算（CSS Object Modal）：级联地生成每个节点的生效样式</li><li>布局（Layout）：计算布局，执行渲染算法</li><li>重绘（Paint）：各层分别进行绘制（比如3D动画）</li><li>合成（Composite）：合成各层的渲染结果</li></ol></blockquote><p>又<code>GUI渲染线程</code>与<code>JS线程</code>是互斥的，所以<strong>JS脚本执行</strong> 和 <strong>GUI渲染</strong> 不能同时执行。即每个渲染帧中浏览器主要做的工作如下</p><div class="language-txt codeBlockContainer_azwa theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_kMmd"><pre tabindex="0" class="prism-code language-txt codeBlock_eq8c thin-scrollbar"><code class="codeBlockLines_M058"><span class="token-line" style="color:#393A34"><span class="token plain">执行JS =&gt; 空闲 =&gt; GUI渲染(绘制)</span><br></span></code></pre><div class="buttonGroup_VjRJ"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_nkyW" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nr7X"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_P_G1"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果一帧的<code>JS</code>执行的时间过长，就会丢掉一次帧的绘制。</p><h1>React如何减少卡顿</h1><blockquote><p>浏览器在每一帧的绘制过程中，会预留一些时间给<code>JS</code>线程。<code>React</code>利用这部分时间更新组件。如果在一帧中浏览器给<code>JS</code>线程预留的时间不够用时，<code>React</code>会将线程控制权交换给浏览器，使其可以有时间渲染UI，<code>React</code>则等待下一帧时间到来时继续被中断的工作。减少掉帧的可能性。</p><p>这种将长任务拆分到每一帧中，像蚂蚁搬家一样一次执行一小段任务的操作被称为<code>时间切片</code></p></blockquote><p>另有针对网络延迟造成的页面卡顿，<code>React</code>内部也有<code>Suspense</code>功能对其进行优化处理。</p><h1>引用</h1><p><a href="https://harttle.land/2017/08/15/browser-render-frame.html" target="_blank" rel="noopener noreferrer">浏览器的 16ms 渲染帧</a> </p><p><a href="https://react.iamkasong.com/preparation/idea.html#cpu%E7%9A%84%E7%93%B6%E9%A2%88" target="_blank" rel="noopener noreferrer">CPU的瓶颈</a> </p><p><a href="https://juejin.cn/post/7018532992410714142" target="_blank" rel="noopener noreferrer">肝了一晚的浏览器渲染进程</a></p>]]></content>
    </entry>
</feed>